#!/usr/bin/env nu

use std assert

def main [
  device_path: string, # Path for the system configuration. Must contain a 'configuration.nix' and an 'npins' directory.
  command: string = "switch", # Main command for 'nixos-rebuild'. 'switch' or 'dry-run'
  ...extra_args: string, # Passed to 'nixos-rebuild'
]: nothing -> nothing {

  assert_dir $device_path;

  let abs_device_path = ($device_path | path expand --strict);

  let npins_path = ($abs_device_path | path join npins default.nix);
  let sources_path = ($abs_device_path | path join npins sources.json);

  let source_names = open $sources_path | get pins | columns;
  let source_nix_path_pairs = ($source_names | each { |source| [ $source, (source_nix_path $npins_path $source)] });

  let configuration_path = ($abs_device_path | path join configuration.nix);
  let sources_nix_path = ($source_nix_path_pairs | each { |pair| $"($pair.0)=($pair.1)" } | str join ':');
  let nix_path = $"nixos-config=($configuration_path):" + $sources_nix_path;
  print $"final nix path: '($nix_path)'";

  with-env {
    NIX_PATH: $nix_path,
  } {
    # For some reason '--preserve-env=NIX_PATH' doesn't pass the env variable.
    sudo "--preserve-env" "-u" $"(whoami)" "nixos-rebuild" $command "--fast" ...$extra_args
  }
}

def source_nix_path [npins_path: string, source: string] -> string {
  run-external "nix" "--extra-experimental-features" "nix-command" "eval" "--raw" "-f" $npins_path $source
}

def assert_dir [path: string] {
  assert ($path | path exists) $"path '($path)' doesn't exit";
  assert (($path | path type) == "dir") $"path ($path) is not a directory";
}
