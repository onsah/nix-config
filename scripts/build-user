#!/usr/bin/env nu

use std assert

def main [
  user_path: string, # Path for the user configuration. Must contain a 'home.nix' file and an 'npins' directory.
  command: string = "switch", # Main command for 'home-manager'. 'switch' or 'dry-run'
] {
  assert_dir $user_path;

  let abs_user_path = ($user_path | path expand --strict);

  let npins_path = ($abs_user_path | path join npins default.nix);
  let sources_path = ($abs_user_path | path join npins sources.json);

  let source_names = open $sources_path | get pins | columns;
  let source_nix_path_pairs = ($source_names | each { |source| [ $source, (source_nix_path $npins_path $source)] });

  let nixpkgs_pin = run-external "nix" "--extra-experimental-features" "nix-command" "eval" "--raw" "-f" $npins_path "nixpkgs";
  let nixpkgs_unstable_pin = run-external "nix" "--extra-experimental-features" "nix-command" "eval" "--raw" "-f" $npins_path "nixpkgs-unstable";
  let home_manager_pin = run-external "nix" "--extra-experimental-features" "nix-command" "eval" "--raw" "-f" $npins_path "home-manager";

  let home_manager_path = ($abs_user_path | path join home.nix);
  let sources_nix_path = ($source_nix_path_pairs | each { |pair| $"($pair.0)=($pair.1)" } | str join ':');

  with-env {
    NIX_PATH: $"($sources_nix_path)",
  } {
    home-manager $command -f $home_manager_path;
  }
}

def source_nix_path [npins_path: string, source: string] -> string {
  run-external "nix" "--extra-experimental-features" "nix-command" "eval" "--raw" "-f" $npins_path $source
}

def assert_file [path: string] {
  assert ($path | path exists) $"path '($path)' doesn't exit";
  assert (($path | path type) == "file") $"path ($path) is not a directory";
}

def assert_dir [path: string] {
  assert ($path | path exists) $"path '($path)' doesn't exit";
  assert (($path | path type) == "dir") $"path ($path) is not a directory";
}
